    * data Bool
          o = False
          o | True 
    * (&&) :: Bool -> Bool -> Bool
    * (||) :: Bool -> Bool -> Bool
    * not :: Bool -> Bool
    * otherwise :: Bool
    * data Maybe a
          o = Nothing
          o | Just a 
    * maybe :: b -> (a -> b) -> Maybe a -> b
    * data Either a b
          o = Left a
          o | Right b 
    * either :: (a -> c) -> (b -> c) -> Either a b -> c
    * data Ordering
          o = LT
          o | EQ
          o | GT 
    * data Char
    * type String = [Char]
    * fst :: (a, b) -> a
    * snd :: (a, b) -> b
    * curry :: ((a, b) -> c) -> a -> b -> c
    * uncurry :: (a -> b -> c) -> (a, b) -> c
    * class Eq a where
          o (==) :: a -> a -> Bool
          o (/=) :: a -> a -> Bool
    * class Eq a => Ord a where
          o compare :: a -> a -> Ordering
          o (<) :: a -> a -> Bool
          o (>=) :: a -> a -> Bool
          o (>) :: a -> a -> Bool
          o (<=) :: a -> a -> Bool
          o max :: a -> a -> a
          o min :: a -> a -> a
    * class Enum a where
          o succ :: a -> a
          o pred :: a -> a
          o toEnum :: Int -> a
          o fromEnum :: a -> Int
          o enumFrom :: a -> [a]
          o enumFromThen :: a -> a -> [a]
          o enumFromTo :: a -> a -> [a]
          o enumFromThenTo :: a -> a -> a -> [a]
    * class Bounded a where
          o minBound :: a
          o maxBound :: a
    * data Int
    * data Integer
    * data Float
    * data Double
    * type Rational = Ratio Integer
    * class (Eq a, Show a) => Num a where
          o (+) :: a -> a -> a
          o (*) :: a -> a -> a
          o (-) :: a -> a -> a
          o negate :: a -> a
          o abs :: a -> a
          o signum :: a -> a
          o fromInteger :: Integer -> a
    * class (Num a, Ord a) => Real a where
          o toRational :: a -> Rational
    * class (Real a, Enum a) => Integral a where
          o quot :: a -> a -> a
          o rem :: a -> a -> a
          o div :: a -> a -> a
          o mod :: a -> a -> a
          o quotRem :: a -> a -> (a, a)
          o divMod :: a -> a -> (a, a)
          o toInteger :: a -> Integer
    * class Num a => Fractional a where
          o (/) :: a -> a -> a
          o recip :: a -> a
          o fromRational :: Rational -> a
    * class Fractional a => Floating a where
          o pi :: a
          o exp :: a -> a
          o sqrt :: a -> a
          o log :: a -> a
          o (**) :: a -> a -> a
          o logBase :: a -> a -> a
          o sin :: a -> a
          o tan :: a -> a
          o cos :: a -> a
          o asin :: a -> a
          o atan :: a -> a
          o acos :: a -> a
          o sinh :: a -> a
          o tanh :: a -> a
          o cosh :: a -> a
          o asinh :: a -> a
          o atanh :: a -> a
          o acosh :: a -> a
    * class (Real a, Fractional a) => RealFrac a where
          o properFraction :: Integral b => a -> (b, a)
          o truncate :: Integral b => a -> b
          o round :: Integral b => a -> b
          o ceiling :: Integral b => a -> b
          o floor :: Integral b => a -> b
    * class (RealFrac a, Floating a) => RealFloat a where
          o floatRadix :: a -> Integer
          o floatDigits :: a -> Int
          o floatRange :: a -> (Int, Int)
          o decodeFloat :: a -> (Integer, Int)
          o encodeFloat :: Integer -> Int -> a
          o exponent :: a -> Int
          o significand :: a -> a
          o scaleFloat :: Int -> a -> a
          o isNaN :: a -> Bool
          o isInfinite :: a -> Bool
          o isDenormalized :: a -> Bool
          o isNegativeZero :: a -> Bool
          o isIEEE :: a -> Bool
          o atan2 :: a -> a -> a
    * subtract :: Num a => a -> a -> a
    * even :: Integral a => a -> Bool
    * odd :: Integral a => a -> Bool
    * gcd :: Integral a => a -> a -> a
    * lcm :: Integral a => a -> a -> a
    * (^) :: (Num a, Integral b) => a -> b -> a
    * (^^) :: (Fractional a, Integral b) => a -> b -> a
    * fromIntegral :: (Integral a, Num b) => a -> b
    * realToFrac :: (Real a, Fractional b) => a -> b
    * class Monad m where
          o (>>=) :: forall a b. m a -> (a -> m b) -> m b
          o (>>) :: forall a b. m a -> m b -> m b
          o return :: a -> m a
          o fail :: String -> m a
    * class Functor f where
          o fmap :: (a -> b) -> f a -> f b
    * mapM :: Monad m => (a -> m b) -> [a] -> m [b]
    * mapM_ :: Monad m => (a -> m b) -> [a] -> m ()
    * sequence :: Monad m => [m a] -> m [a]
    * sequence_ :: Monad m => [m a] -> m ()
    * (=<<) :: Monad m => (a -> m b) -> m a -> m b
    * id :: a -> a
    * const :: a -> b -> a
    * (.) :: (b -> c) -> (a -> b) -> a -> c
    * flip :: (a -> b -> c) -> b -> a -> c
    * ($) :: (a -> b) -> a -> b
    * until :: (a -> Bool) -> (a -> a) -> a -> a
    * asTypeOf :: a -> a -> a
    * error :: [Char] -> a
    * undefined :: a
    * seq :: a -> b -> b
    * ($!) :: (a -> b) -> a -> b
    * map :: (a -> b) -> [a] -> [b]
    * (++) :: [a] -> [a] -> [a]
    * filter :: (a -> Bool) -> [a] -> [a]
    * head :: [a] -> a
    * last :: [a] -> a
    * tail :: [a] -> [a]
    * init :: [a] -> [a]
    * null :: [a] -> Bool
    * length :: [a] -> Int
    * (!!) :: [a] -> Int -> a
    * reverse :: [a] -> [a]
    * foldl :: (a -> b -> a) -> a -> [b] -> a
    * foldl1 :: (a -> a -> a) -> [a] -> a
    * foldr :: (a -> b -> b) -> b -> [a] -> b
    * foldr1 :: (a -> a -> a) -> [a] -> a
    * and :: [Bool] -> Bool
    * or :: [Bool] -> Bool
    * any :: (a -> Bool) -> [a] -> Bool
    * all :: (a -> Bool) -> [a] -> Bool
    * sum :: Num a => [a] -> a
    * product :: Num a => [a] -> a
    * concat :: [[a]] -> [a]
    * concatMap :: (a -> [b]) -> [a] -> [b]
    * maximum :: Ord a => [a] -> a
    * minimum :: Ord a => [a] -> a
    * scanl :: (a -> b -> a) -> a -> [b] -> [a]
    * scanl1 :: (a -> a -> a) -> [a] -> [a]
    * scanr :: (a -> b -> b) -> b -> [a] -> [b]
    * scanr1 :: (a -> a -> a) -> [a] -> [a]
    * iterate :: (a -> a) -> a -> [a]
    * repeat :: a -> [a]
    * replicate :: Int -> a -> [a]
    * cycle :: [a] -> [a]
    * take :: Int -> [a] -> [a]
    * drop :: Int -> [a] -> [a]
    * splitAt :: Int -> [a] -> ([a], [a])
    * takeWhile :: (a -> Bool) -> [a] -> [a]
    * dropWhile :: (a -> Bool) -> [a] -> [a]
    * span :: (a -> Bool) -> [a] -> ([a], [a])
    * break :: (a -> Bool) -> [a] -> ([a], [a])
    * elem :: Eq a => a -> [a] -> Bool
    * notElem :: Eq a => a -> [a] -> Bool
    * lookup :: Eq a => a -> [(a, b)] -> Maybe b
    * zip :: [a] -> [b] -> [(a, b)]
    * zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]
    * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
    * zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]
    * unzip :: [(a, b)] -> ([a], [b])
    * unzip3 :: [(a, b, c)] -> ([a], [b], [c])
    * lines :: String -> [String]
    * words :: String -> [String]
    * unlines :: [String] -> String
    * unwords :: [String] -> String
    * type ShowS = String -> String
    * class Show a where
          o showsPrec :: Int -> a -> ShowS
          o show :: a -> String
          o showList :: [a] -> ShowS
    * shows :: Show a => a -> ShowS
    * showChar :: Char -> ShowS
    * showString :: String -> ShowS
    * showParen :: Bool -> ShowS -> ShowS
    * type ReadS a = String -> [(a, String)]
    * class Read a where
          o readsPrec :: Int -> ReadS a
          o readList :: ReadS [a]
    * reads :: Read a => ReadS a
    * readParen :: Bool -> ReadS a -> ReadS a
    * read :: Read a => String -> a
    * lex :: ReadS String
    * data IO a
    * putChar :: Char -> IO ()
    * putStr :: String -> IO ()
    * putStrLn :: String -> IO ()
    * print :: Show a => a -> IO ()
    * getChar :: IO Char
    * getLine :: IO String
    * getContents :: IO String
    * interact :: (String -> String) -> IO ()
    * type FilePath = String
    * readFile :: FilePath -> IO String
    * writeFile :: FilePath -> String -> IO ()
    * appendFile :: FilePath -> String -> IO ()
    * readIO :: Read a => String -> IO a
    * readLn :: Read a => IO a
    * type IOError = IOException
    * ioError :: IOError -> IO a
    * userError :: String -> IOError
    * catch :: IO a -> (IOError -> IO a) -> IO a
