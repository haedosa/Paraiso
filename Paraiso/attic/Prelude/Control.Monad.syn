    * class Functor f where
          o fmap :: (a -> b) -> f a -> f b
    * class Monad m where
          o (>>=) :: forall a b. m a -> (a -> m b) -> m b
          o (>>) :: forall a b. m a -> m b -> m b
          o return :: a -> m a
          o fail :: String -> m a
    * class Monad m => MonadPlus m where
          o mzero :: m a
          o mplus :: m a -> m a -> m a
    * mapM :: Monad m => (a -> m b) -> [a] -> m [b]
    * mapM_ :: Monad m => (a -> m b) -> [a] -> m ()
    * forM :: Monad m => [a] -> (a -> m b) -> m [b]
    * forM_ :: Monad m => [a] -> (a -> m b) -> m ()
    * sequence :: Monad m => [m a] -> m [a]
    * sequence_ :: Monad m => [m a] -> m ()
    * (=<<) :: Monad m => (a -> m b) -> m a -> m b
    * (>=>) :: Monad m => (a -> m b) -> (b -> m c) -> a -> m c
    * (<=<) :: Monad m => (b -> m c) -> (a -> m b) -> a -> m c
    * forever :: Monad m => m a -> m b
    * void :: Functor f => f a -> f ()
    * join :: Monad m => m (m a) -> m a
    * msum :: MonadPlus m => [m a] -> m a
    * mfilter :: MonadPlus m => (a -> Bool) -> m a -> m a
    * filterM :: Monad m => (a -> m Bool) -> [a] -> m [a]
    * mapAndUnzipM :: Monad m => (a -> m (b, c)) -> [a] -> m ([b], [c])
    * zipWithM :: Monad m => (a -> b -> m c) -> [a] -> [b] -> m [c]
    * zipWithM_ :: Monad m => (a -> b -> m c) -> [a] -> [b] -> m ()
    * foldM :: Monad m => (a -> b -> m a) -> a -> [b] -> m a
    * foldM_ :: Monad m => (a -> b -> m a) -> a -> [b] -> m ()
    * replicateM :: Monad m => Int -> m a -> m [a]
    * replicateM_ :: Monad m => Int -> m a -> m ()
    * guard :: MonadPlus m => Bool -> m ()
    * when :: Monad m => Bool -> m () -> m ()
    * unless :: Monad m => Bool -> m () -> m ()
    * liftM :: Monad m => (a1 -> r) -> m a1 -> m r
    * liftM2 :: Monad m => (a1 -> a2 -> r) -> m a1 -> m a2 -> m r
    * liftM3 :: Monad m => (a1 -> a2 -> a3 -> r) -> m a1 -> m a2 -> m a3 -> m r
    * liftM4 :: Monad m => (a1 -> a2 -> a3 -> a4 -> r) -> m a1 -> m a2 -> m a3 -> m a4 -> m r
    * liftM5 :: Monad m => (a1 -> a2 -> a3 -> a4 -> a5 -> r) -> m a1 -> m a2 -> m a3 -> m a4 -> m a5 -> m r
    * ap :: Monad m => m (a -> b) -> m a -> m b

